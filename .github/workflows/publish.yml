name: Publish image

on:
  push:
    branches:
    - master
    tags:
    - '*'
  repository_dispatch:
    types:
    - publish_latest_tag
    - publish_master

jobs:
  publish_image:
    name: Publish image
    runs-on: ubuntu-latest

    steps:
    - if: github.event_name == 'repository_dispatch'
      name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - if: github.event_name != 'repository_dispatch'
      name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Checkout tags and submodules
      shell: bash
      run: |
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*

        AUTH_HEADER="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=${AUTH_HEADER}" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Set variables
      id: vars
      run: |
        GITHUB_REPOSITORY_LC=$(echo "${GITHUB_REPOSITORY}" | tr [A-Z] [a-z])
        echo "::set-output name=name::${GITHUB_REPOSITORY_LC}"
        echo "Name: ${GITHUB_REPOSITORY_LC}"

        VERSION=$(git describe --tags)
        echo "::set-output name=version::${VERSION}"
        echo "Version: ${VERSION}"

        DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo "::set-output name=date::${DATE}"
        echo "Date: ${DATE}"

        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          if [ "${{ github.event.action }}" = "publish_latest_tag" ]; then
            REF="refs/tags/$(git describe $(git rev-list --tags --max-count=1) --tags)"

            # As we checkout out "refs/heads/master" earlier, we have to
            # switch to the tag now.
            git checkout ${REF}
          else
            REF="refs/heads/master"
          fi
        else
          REF=${GITHUB_REF}
        fi
        echo "::set-output name=ref::${REF}"
        echo "Ref: ${REF}"

        SHA="$(git rev-parse --verify ${REF})"
        echo "::set-output name=sha::${SHA}"
        echo "Sha: ${SHA}"

        if [ "${REF}" = "refs/heads/master" ]; then
          ENVIRONMENT="staging"
          TAG="development"
          TAGS="dev"
        else
          ENVIRONMENT="production"
          VERSION_MAJOR=$(echo ${VERSION} | sed -r 's/([0-9]+).*/\1/')
          VERSION_MAJOR_MINOR=$(echo ${VERSION} | sed -r 's/([0-9]+).([0-9]+).*/\1.\2/')

          TAG="${VERSION}"
          TAGS="${VERSION_MAJOR} ${VERSION_MAJOR_MINOR}"
        fi
        echo "::set-output name=tag::${TAG}"
        echo "::set-output name=tags::${TAGS}"
        echo "::set-output name=environment::${ENVIRONMENT}"
        echo "Tags: ${TAG} ${TAGS}"
        echo "Environment: ${ENVIRONMENT}"

        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          DRYRUN="true"
        else
          DRYRUN="false"
        fi
        echo "::set-output name=dryrun::${DRYRUN}"
        echo "Dry run: ${DRYRUN}"

    - name: Build
      run: |
        docker build -t \
          ${{ steps.vars.outputs.name }}:${{ steps.vars.outputs.tag }} \
          --build-arg BUILD_DATE=${{ steps.vars.outputs.date }} \
          --build-arg BUILD_VERSION=${{ steps.vars.outputs.version }} \
          .

        # If this tag has multiple tags, publish them too
        for tag in ${{ steps.vars.outputs.tags }}; do
          docker tag ${{ steps.vars.outputs.name }}:${{ steps.vars.outputs.tag }} \
            ${{ steps.vars.outputs.name }}:${tag}
        done

    - if: steps.vars.outputs.dryrun == 'false'
      name: Publish
      id: publish
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ steps.vars.outputs.name }}

        DOCKER_TAG=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.vars.outputs.name }}:${{ steps.vars.outputs.tag }} | cut -d@ -f2)
        echo "::set-output name=docker_tag::${DOCKER_TAG}"
        echo "Docker tag: ${DOCKER_TAG}"

    - if: steps.vars.outputs.dryrun == 'false'
      name: Trigger deployment
      uses: actions/github-script@0.3.0
      with:
        github-token: ${{ secrets.DEPLOYMENT_TOKEN }}
        previews: ant-man
        script: |
          github.repos.createDeployment({
            owner: context.payload.repository.owner.login,
            repo: context.payload.repository.name,
            ref: "${{ steps.vars.outputs.sha }}",
            auto_merge: false,
            environment: "${{ steps.vars.outputs.environment }}",
            required_contexts: [],
            description: "${{ steps.vars.outputs.version }} on ${{ steps.vars.outputs.date }}",
            payload: { tag: "${{ steps.publish.outputs.docker_tag }}", version: "${{ steps.vars.outputs.version }}", date: "${{ steps.vars.outputs.date }}" }
          })
